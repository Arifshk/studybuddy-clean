{"file_contents":{"DEPLOYMENT_GUIDE.md":{"content":"# StudyBuddy Deployment Guide\n\n## Download and Setup for IntelliJ IDEA\n\n### Prerequisites\n- Node.js 18+ installed on your machine\n- IntelliJ IDEA Ultimate with JavaScript/TypeScript support\n- Firebase account\n- Stripe account\n\n### IntelliJ Setup\n1. Download all project files to your local machine\n2. Open IntelliJ IDEA and select \"Open or Import\"\n3. Navigate to your StudyBuddy folder and open it\n4. IntelliJ should automatically detect it as a Node.js project\n5. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n### Environment Variables Setup\nCreate a `.env` file in your project root with these variables:\n\n```env\n# Firebase Configuration\nVITE_FIREBASE_API_KEY=your_firebase_api_key\nVITE_FIREBASE_AUTH_DOMAIN=your_project_id.firebaseapp.com\nVITE_FIREBASE_PROJECT_ID=your_project_id\nVITE_FIREBASE_STORAGE_BUCKET=your_project_id.appspot.com\nVITE_FIREBASE_MESSAGING_SENDER_ID=your_messaging_sender_id\nVITE_FIREBASE_APP_ID=your_app_id\n\n# Stripe Configuration\nVITE_STRIPE_PUBLIC_KEY=pk_test_...\nSTRIPE_SECRET_KEY=sk_test_...\n```\n\n### Firebase Setup\n1. Go to https://console.firebase.google.com/\n2. Create a new project or use existing one\n3. Enable Firestore Database in production mode\n4. Add a web app and copy the configuration values\n5. Set up Firestore security rules:\n\n```javascript\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /sessions/{sessionId} {\n      allow read, write: if true; // For demo purposes - restrict in production\n    }\n    match /donations/{donationId} {\n      allow read, write: if true; // For demo purposes - restrict in production\n    }\n  }\n}\n```\n\n### Stripe Setup\n1. Go to https://dashboard.stripe.com/\n2. Get your publishable key (starts with `pk_test_`) and secret key (starts with `sk_test_`)\n3. Add these to your environment variables\n\n### Running Locally in IntelliJ\n1. Open the terminal in IntelliJ\n2. Run the development server:\n   ```bash\n   npm run dev\n   ```\n3. Open http://localhost:5000 in your browser\n\n## Vercel Deployment\n\n### Method 1: Direct Deploy (Recommended)\n1. Push your code to GitHub, GitLab, or Bitbucket\n2. Go to https://vercel.com/ and sign up/login\n3. Click \"New Project\" and import your repository\n4. Configure build settings:\n   - Build Command: `npm run build`\n   - Output Directory: `dist`\n   - Install Command: `npm install`\n\n### Method 2: Vercel CLI\n```bash\n# Install Vercel CLI\nnpm i -g vercel\n\n# Deploy from your project directory\nvercel\n\n# Follow the prompts\n```\n\n### Environment Variables on Vercel\n1. In your Vercel project dashboard, go to Settings → Environment Variables\n2. Add all the variables from your `.env` file:\n   - `VITE_FIREBASE_API_KEY`\n   - `VITE_FIREBASE_AUTH_DOMAIN`\n   - `VITE_FIREBASE_PROJECT_ID`\n   - `VITE_FIREBASE_STORAGE_BUCKET`\n   - `VITE_FIREBASE_MESSAGING_SENDER_ID`\n   - `VITE_FIREBASE_APP_ID`\n   - `VITE_STRIPE_PUBLIC_KEY`\n   - `STRIPE_SECRET_KEY`\n\n### Production Considerations\n\n#### Firebase Security Rules\nUpdate your Firestore rules for production:\n\n```javascript\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /sessions/{sessionId} {\n      allow read: if true;\n      allow write: if request.auth != null; // Requires authentication\n    }\n    match /donations/{donationId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth != null;\n    }\n  }\n}\n```\n\n#### Stripe Configuration\n- Switch to live keys when ready for production\n- Configure webhooks for payment confirmations\n- Set up proper error handling and logging\n\n## Project Structure\n\n```\nStudyBuddy/\n├── client/                 # Frontend React app\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── pages/          # Page components\n│   │   ├── lib/           # Firebase and utility functions\n│   │   ├── store/         # Zustand state management\n│   │   └── hooks/         # Custom React hooks\n│   ├── public/            # Static assets\n│   └── index.html         # Entry point\n├── server/                # Backend Express server\n│   ├── routes.ts          # API routes\n│   └── index.ts           # Server entry point\n├── shared/                # Shared types and schemas\n│   └── schema.ts          # Database schemas\n├── package.json           # Dependencies and scripts\n├── vite.config.ts         # Vite configuration\n└── tailwind.config.ts     # Tailwind CSS configuration\n```\n\n## Available Scripts\n\n- `npm run dev` - Start development server\n- `npm run build` - Build for production\n- `npm run preview` - Preview production build\n- `npm run type-check` - TypeScript type checking\n\n## Features\n\n✅ Real-time study session updates via Firebase\n✅ Course-based session filtering\n✅ Location-based session discovery\n✅ Stripe-powered donation system\n✅ Responsive design with Wilfrid Laurier branding\n✅ Dark/light mode support\n✅ Report system for session moderation\n\n## Support\n\nFor issues or questions:\n1. Check the console for error messages\n2. Verify all environment variables are set correctly\n3. Ensure Firebase and Stripe accounts are properly configured\n4. Check network connectivity and API quotas\n\n## License\n\nMIT License - See LICENSE file for details","size_bytes":5330},"README.md":{"content":"# StudyBuddy 📚\n\nA real-time study session platform built for Wilfrid Laurier University students to discover and join study sessions organized by course and location.\n\n## ✨ Features\n\n- 🔥 **Real-time Updates**: Sessions update instantly using Firebase Firestore\n- 📍 **Location-based Discovery**: Find study sessions by building and floor\n- 📚 **Course Organization**: Filter sessions by specific courses\n- 💰 **Donation Support**: Support the platform with Stripe integration\n- 🌙 **Dark Mode**: Full light/dark theme support\n- 📱 **Responsive Design**: Works seamlessly on desktop and mobile\n- 🛡️ **Privacy-First**: Only shares building/floor, not GPS coordinates\n\n## 🚀 Quick Start\n\n### Prerequisites\n- Node.js 18+\n- Firebase account\n- Stripe account (for donations)\n\n### Installation\n```bash\n# Clone and install dependencies\ngit clone <your-repo>\ncd studybuddy\nnpm install\n```\n\n### Environment Setup\nCreate a `.env` file with your credentials:\n\n```env\n# Firebase\nVITE_FIREBASE_API_KEY=your_api_key\nVITE_FIREBASE_AUTH_DOMAIN=your_domain\nVITE_FIREBASE_PROJECT_ID=your_project_id\nVITE_FIREBASE_STORAGE_BUCKET=your_bucket\nVITE_FIREBASE_MESSAGING_SENDER_ID=your_sender_id\nVITE_FIREBASE_APP_ID=your_app_id\n\n# Stripe\nVITE_STRIPE_PUBLIC_KEY=pk_test_...\nSTRIPE_SECRET_KEY=sk_test_...\n```\n\n### Development\n```bash\nnpm run dev\n```\n\nVisit http://localhost:5000\n\n## 🏗️ Tech Stack\n\n- **Frontend**: React 18, TypeScript, Tailwind CSS\n- **Backend**: Express.js, Node.js\n- **Database**: Firebase Firestore (real-time)\n- **Payments**: Stripe\n- **State Management**: Zustand\n- **Forms**: React Hook Form + Zod\n- **UI Components**: Radix UI + shadcn/ui\n- **Build Tool**: Vite\n\n## 📦 Deployment\n\n### Vercel (Recommended)\n1. Push to GitHub\n2. Connect to Vercel\n3. Add environment variables\n4. Deploy!\n\nSee [DEPLOYMENT_GUIDE.md](./DEPLOYMENT_GUIDE.md) for detailed instructions.\n\n## 🎨 Design System\n\nStudyBuddy uses Wilfrid Laurier University's official colors:\n- **Primary Purple**: #4F2683\n- **Secondary Gold**: #FFB81C\n- **Supporting neutrals** with proper contrast ratios\n\n## 📱 Pages\n\n- **Landing**: Welcome page with app overview\n- **Sessions**: Browse and filter active study sessions  \n- **Host**: Create new study sessions\n- **Donate**: Support the platform development\n- **Moderate**: Report inappropriate content\n\n## 🔧 Development\n\n### Available Scripts\n- `npm run dev` - Development server\n- `npm run build` - Production build\n- `npm run preview` - Preview build locally\n- `npm run check` - TypeScript checking\n\n### Project Structure\n```\n├── client/           # React frontend\n│   ├── src/\n│   │   ├── components/  # UI components\n│   │   ├── pages/       # Route components  \n│   │   ├── lib/         # Firebase & utilities\n│   │   └── store/       # State management\n├── server/           # Express backend\n├── shared/           # Shared types\n└── public/           # Static assets\n```\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Submit a pull request\n\n## 📄 License\n\nMIT License - feel free to use this code for your own projects!\n\n## 🆘 Support\n\nHaving issues? Check out:\n- [Deployment Guide](./DEPLOYMENT_GUIDE.md)\n- Firebase Console for database issues\n- Stripe Dashboard for payment issues\n\n---\n\nBuilt with ❤️ for Wilfrid Laurier University students","size_bytes":3421},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# StudyBuddy\n\n## Overview\n\nStudyBuddy is a React single-page application built for Wilfrid Laurier University students to host and join public study sessions organized by course and building/floor location. The application provides a privacy-first approach by only sharing building and floor information without GPS tracking. Students can create study sessions for specific courses, filter sessions by location and course, and join existing sessions with capacity limits.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Tooling:**\n- React 18 with TypeScript for type safety and modern component development\n- Vite as the build tool for fast development and optimized production builds\n- Wouter for client-side routing (lightweight React Router alternative)\n- TanStack Query for state management and data fetching patterns\n\n**UI & Styling:**\n- Tailwind CSS for utility-first styling with custom design system\n- Shadcn/ui component library built on Radix UI primitives\n- Custom CSS variables for Wilfrid Laurier branding (purple #4F2683, gold #FFB81C)\n- Responsive design with mobile-first approach using Tailwind breakpoints\n\n**State Management:**\n- Zustand for global state management (sessions, user state, modal preferences)\n- Local storage integration for persisting user preferences and session data\n- In-memory storage for demo data without backend persistence\n\n**Component Architecture:**\n- Modular component structure with reusable UI components\n- Form handling with React Hook Form and Zod validation\n- Modal system for reports and donations with proper state management\n- Filter system with real-time session filtering capabilities\n\n### Backend Architecture\n\n**Server Setup:**\n- Express.js server with TypeScript for API endpoints\n- Development/production environment configuration\n- Static file serving for production builds\n- Error handling middleware with proper HTTP status codes\n\n**Development Integration:**\n- Vite middleware integration for hot module replacement\n- Development-only middleware for error overlays and debugging\n- Separate client and server build processes\n\n**Data Layer:**\n- In-memory storage implementation using Maps for demo purposes\n- Storage interface abstraction for future database integration\n- Drizzle ORM configuration for PostgreSQL (prepared for future use)\n\n### Data Storage Solutions\n\n**Current Implementation:**\n- MemStorage class implementing IStorage interface for CRUD operations\n- Session data stored in Zustand global state\n- User preferences persisted in localStorage\n- Demo data initialization with realistic session examples\n\n**Database Preparation:**\n- Drizzle ORM configured with PostgreSQL dialect\n- Database schema defined in shared directory for type consistency\n- Migration system ready for production database deployment\n- Neon database serverless integration prepared\n\n### Authentication and Authorization\n\n**Current State:**\n- Mock authentication system for demo purposes\n- Simple toggle between signed-in/signed-out states\n- User session stored in global state\n- No actual authentication backend implemented\n\n**Future Considerations:**\n- Prepared for user table schema with username/password fields\n- Session management structure ready for implementation\n- Protected routes architecture can be easily added\n\n### External Dependencies\n\n**UI Component Libraries:**\n- Radix UI primitives for accessible component foundation\n- Lucide React for consistent iconography\n- Date-fns for date manipulation and formatting\n- Class Variance Authority for component variant management\n\n**Development Tools:**\n- ESBuild for server-side bundling\n- PostCSS with Autoprefixer for CSS processing\n- TypeScript for type checking across client/server\n- Replit integration for development environment\n\n**Database & ORM:**\n- Drizzle ORM for type-safe database operations\n- Drizzle Kit for schema management and migrations\n- @neondatabase/serverless for PostgreSQL connection\n- Drizzle-zod for runtime schema validation\n\n**Routing & Navigation:**\n- Wouter for lightweight client-side routing\n- Path-based navigation with proper URL structure\n- Route protection architecture ready for implementation\n\n**Form Management:**\n- React Hook Form for performant form handling\n- Hookform resolvers for Zod integration\n- Real-time validation with proper error messaging\n\nThe architecture prioritizes rapid development and easy deployment while maintaining clean separation of concerns and type safety throughout the application stack.","size_bytes":4562},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        \"laurier-purple\": \"#4F2683\",\n        \"laurier-gold\": \"#FFB81C\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2827},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: process.env.HOST || \"localhost\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2088},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport Stripe from \"stripe\";\n\nif (!process.env.TESTING_STRIPE_SECRET_KEY) {\n  throw new Error('Missing required Stripe secret: TESTING_STRIPE_SECRET_KEY');\n}\nconst stripe = new Stripe(process.env.TESTING_STRIPE_SECRET_KEY, {\n  apiVersion: \"2025-08-27.basil\",\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Debug endpoint to check Stripe account info\n  app.get(\"/api/stripe-diagnostics\", async (req, res) => {\n    try {\n      const account = await stripe.accounts.retrieve();\n      const diagnostics = {\n        accountId: account.id,\n        businessName: account.business_profile?.name || account.email,\n        testMode: true, // We're using test keys\n        keyUsed: \"TESTING_STRIPE_SECRET_KEY\"\n      };\n      console.log(\"Stripe Diagnostics:\", diagnostics);\n      res.json(diagnostics);\n    } catch (error: any) {\n      console.error(\"Diagnostics error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Stripe payment route for one-time donations\n  app.post(\"/api/create-payment-intent\", async (req, res) => {\n    try {\n      const { amount } = req.body;\n      \n      // Debug: Log which key is being used\n      console.log(\"Creating payment intent with key:\", process.env.TESTING_STRIPE_SECRET_KEY ? \"TESTING key\" : \"REGULAR key\");\n      console.log(\"Amount:\", amount);\n      \n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: Math.round(amount * 100), // Convert to cents\n        currency: \"usd\",\n        metadata: {\n          type: \"donation\",\n          app: \"StudyBuddy\",\n          timestamp: new Date().toISOString()\n        }\n      });\n      \n      console.log(\"Payment intent created:\", paymentIntent.id);\n      console.log(\"Test mode:\", paymentIntent.livemode === false);\n      console.log(\"Direct link to payment:\", `https://dashboard.stripe.com/test/payments/${paymentIntent.id}`);\n      console.log(\"Client secret:\", paymentIntent.client_secret?.substring(0, 20) + \"...\");\n      \n      res.json({ \n        clientSecret: paymentIntent.client_secret,\n        paymentIntentId: paymentIntent.id,\n        dashboardUrl: `https://dashboard.stripe.com/test/payments/${paymentIntent.id}`\n      });\n    } catch (error: any) {\n      console.error(\"Stripe error:\", error);\n      res\n        .status(500)\n        .json({ message: \"Error creating payment intent: \" + error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":2588},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"client/src/App.tsx":{"content":"import { useEffect } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { NavBar } from \"@/components/NavBar\";\nimport { Landing } from \"@/pages/Landing\";\nimport { Sessions } from \"@/pages/Sessions\";\nimport { Host } from \"@/pages/Host\";\nimport { Donate } from \"@/pages/Donate\";\nimport { Moderate } from \"@/pages/Moderate\";\nimport NotFound from \"@/pages/not-found\";\nimport { useStore } from \"@/store/useStore\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <NavBar />\n      <Switch>\n        <Route path=\"/\" component={Landing} />\n        <Route path=\"/app\" component={Sessions} />\n        <Route path=\"/host\" component={Host} />\n        <Route path=\"/donate\" component={Donate} />\n        <Route path=\"/moderate\" component={Moderate} />\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nfunction App() {\n  const { initializeLocalStorage, initializeFirebase, initializeAuth, cleanup } = useStore();\n\n  useEffect(() => {\n    initializeLocalStorage();\n    initializeFirebase();\n    initializeAuth();\n    \n    return () => {\n      cleanup();\n    };\n  }, [initializeLocalStorage, initializeFirebase, initializeAuth, cleanup]);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1617},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(220, 15%, 97%);\n  --foreground: hsl(220, 15%, 9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(220, 15%, 9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(220, 15%, 9%);\n  --primary: hsl(262, 52%, 23%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(43, 100%, 56%);\n  --secondary-foreground: hsl(220, 15%, 9%);\n  --muted: hsl(220, 15%, 96%);\n  --muted-foreground: hsl(220, 15%, 45%);\n  --accent: hsl(43, 100%, 56%);\n  --accent-foreground: hsl(220, 15%, 9%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(220, 15%, 90%);\n  --input: hsl(220, 15%, 90%);\n  --ring: hsl(262, 52%, 23%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(220, 15%, 9%);\n  --sidebar-primary: hsl(262, 52%, 23%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(43, 100%, 56%);\n  --sidebar-accent-foreground: hsl(220, 15%, 9%);\n  --sidebar-border: hsl(220, 15%, 90%);\n  --sidebar-ring: hsl(262, 52%, 23%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n  --laurier-purple: hsl(262, 52%, 23%);\n  --laurier-gold: hsl(43, 100%, 56%);\n  --neutral-dark: hsl(220, 26%, 6%);\n  --neutral-light: hsl(220, 15%, 97%);\n}\n\n.dark {\n  --background: hsl(220, 26%, 6%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(220, 26%, 6%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(262, 52%, 23%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(43, 100%, 56%);\n  --secondary-foreground: hsl(220, 15%, 9%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(43, 100%, 56%);\n  --accent-foreground: hsl(220, 15%, 9%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(262, 52%, 23%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .laurier-purple {\n    color: #4F2683;\n  }\n  \n  .laurier-gold {\n    color: #FFB81C;\n  }\n  \n  .bg-laurier-purple {\n    background-color: #4F2683;\n  }\n  \n  .bg-laurier-gold {\n    background-color: #FFB81C;\n  }\n  \n  .border-laurier-purple {\n    border-color: #4F2683;\n  }\n  \n  .text-laurier-purple {\n    color: #4F2683;\n  }\n  \n  .text-laurier-gold {\n    color: #FFB81C;\n  }\n\n  .owl-icon {\n    @apply inline-block w-5 h-5 relative;\n    background: radial-gradient(circle at 30% 40%, #4F2683 2px, transparent 2px),\n                radial-gradient(circle at 70% 40%, #4F2683 2px, transparent 2px);\n    border: 2px solid #4F2683;\n    border-radius: 50% 50% 40% 40%;\n  }\n  \n  .owl-icon::after {\n    content: '';\n    @apply absolute bottom-[-2px] left-1/2 transform -translate-x-1/2;\n    width: 0;\n    height: 0;\n    border-left: 3px solid transparent;\n    border-right: 3px solid transparent;\n    border-top: 4px solid #4F2683;\n  }\n}\n","size_bytes":3553},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/DonateModal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Heart } from \"lucide-react\";\nimport { useStore } from \"@/store/useStore\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { StripeCheckout } from \"./StripeCheckout\";\n\ninterface DonateModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function DonateModal({ isOpen, onClose }: DonateModalProps) {\n  const { snoozeDonateModal, dismissDonateModal } = useStore();\n  const { toast } = useToast();\n  const [selectedAmount, setSelectedAmount] = useState<number | null>(null);\n  const [showCheckout, setShowCheckout] = useState(false);\n\n  const handleSnooze = () => {\n    snoozeDonateModal();\n    toast({\n      title: \"Reminder set\",\n      description: \"We'll remind you again in 7 days\",\n    });\n    onClose();\n  };\n\n  const handleDismiss = () => {\n    dismissDonateModal();\n    onClose();\n  };\n\n  const handleDonate = (amount: number) => {\n    setSelectedAmount(amount);\n    setShowCheckout(true);\n  };\n\n  const handleCheckoutSuccess = () => {\n    setShowCheckout(false);\n    setSelectedAmount(null);\n    onClose();\n    // Success message is handled by StripeCheckout component\n  };\n\n  const handleCheckoutCancel = () => {\n    setShowCheckout(false);\n    setSelectedAmount(null);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"modal-donate\">\n        <DialogHeader>\n          <DialogTitle>Support StudyBuddy</DialogTitle>\n          <DialogDescription>\n            Consider supporting us to keep the platform free for all students!\n          </DialogDescription>\n        </DialogHeader>\n        {showCheckout && selectedAmount ? (\n          <StripeCheckout\n            amount={selectedAmount}\n            onSuccess={handleCheckoutSuccess}\n            onCancel={handleCheckoutCancel}\n          />\n        ) : (\n          <div className=\"text-center space-y-6\">\n          <div className=\"mx-auto w-12 h-12 bg-secondary rounded-full flex items-center justify-center\">\n            <Heart className=\"w-6 h-6 text-secondary-foreground\" />\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n              Enjoying StudyBuddy?\n            </h3>\n            <p className=\"text-muted-foreground\">\n              Consider supporting us to keep the platform free for all students!\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-3 gap-3\">\n            <Button\n              onClick={() => handleDonate(3)}\n              className=\"bg-primary text-primary-foreground hover:opacity-90\"\n              data-testid=\"button-donate-3\"\n            >\n              $3\n            </Button>\n            <Button\n              onClick={() => handleDonate(5)}\n              className=\"bg-primary text-primary-foreground hover:opacity-90\"\n              data-testid=\"button-donate-5\"\n            >\n              $5\n            </Button>\n            <Button\n              onClick={() => handleDonate(10)}\n              className=\"bg-primary text-primary-foreground hover:opacity-90\"\n              data-testid=\"button-donate-10\"\n            >\n              $10\n            </Button>\n          </div>\n\n          <div className=\"flex gap-3\">\n            <Button\n              variant=\"outline\"\n              onClick={handleSnooze}\n              className=\"flex-1\"\n              data-testid=\"button-donate-snooze\"\n            >\n              Remind me in 7 days\n            </Button>\n            <Button\n              variant=\"ghost\"\n              onClick={handleDismiss}\n              className=\"flex-1 text-muted-foreground hover:text-foreground\"\n              data-testid=\"button-donate-dismiss\"\n            >\n              Don't show again\n            </Button>\n          </div>\n        </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4014},"client/src/components/DynamicTileInput.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { X } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface DynamicTileInputProps {\n  value: string[];\n  onChange: (value: string[]) => void;\n  suggestions: string[];\n  placeholder: string;\n  className?: string;\n  maxItems?: number;\n  onInputChange?: (input: string) => void;\n}\n\nexport function DynamicTileInput({\n  value,\n  onChange,\n  suggestions,\n  placeholder,\n  className,\n  maxItems = 5,\n  onInputChange\n}: DynamicTileInputProps) {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [filteredSuggestions, setFilteredSuggestions] = useState<string[]>([]);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputValue.trim()) {\n      const filtered = suggestions.filter(\n        (suggestion) =>\n          suggestion.toLowerCase().includes(inputValue.toLowerCase()) &&\n          !(Array.isArray(value) ? value : []).includes(suggestion)\n      );\n      setFilteredSuggestions(filtered);\n      setShowSuggestions(true);\n    } else {\n      setFilteredSuggestions([]);\n      setShowSuggestions(false);\n    }\n  }, [inputValue, suggestions, value]);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value;\n    setInputValue(newValue);\n    onInputChange?.(newValue);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\" || e.key === \"Tab\") {\n      e.preventDefault();\n      if (inputValue.trim() && value.length < maxItems) {\n        addTile(inputValue.trim());\n      }\n    } else if (e.key === \"Backspace\" && !inputValue && value.length > 0) {\n      // Remove the last tile if backspace is pressed and input is empty\n      removeTile(value[value.length - 1]);\n    }\n  };\n\n  const addTile = (tile: string) => {\n    const currentValue = Array.isArray(value) ? value : [];\n    if (!currentValue.includes(tile) && currentValue.length < maxItems) {\n      onChange([...currentValue, tile]);\n      setInputValue(\"\");\n      setShowSuggestions(false);\n    }\n  };\n\n  const removeTile = (tileToRemove: string) => {\n    const currentValue = Array.isArray(value) ? value : [];\n    onChange(currentValue.filter(tile => tile !== tileToRemove));\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    addTile(suggestion);\n    inputRef.current?.focus();\n  };\n\n  return (\n    <div className={`relative ${className}`}>\n      {/* Container for tiles and input */}\n      <div className=\"min-h-[40px] border border-input rounded-md p-2 flex flex-wrap gap-2 items-center bg-background focus-within:ring-1 focus-within:ring-ring\">\n        {/* Render existing tiles */}\n        {(Array.isArray(value) ? value : []).map((tile, index) => (\n          <Badge\n            key={index}\n            variant=\"secondary\"\n            className=\"bg-primary text-primary-foreground hover:bg-primary/80 cursor-default\"\n          >\n            {tile}\n            <button\n              type=\"button\"\n              onClick={() => removeTile(tile)}\n              className=\"ml-1 hover:bg-primary/20 rounded-full p-0.5 transition-colors\"\n              data-testid={`remove-tile-${tile}`}\n            >\n              <X size={12} />\n            </button>\n          </Badge>\n        ))}\n        \n        {/* Input field */}\n        {(Array.isArray(value) ? value : []).length < maxItems && (\n          <Input\n            ref={inputRef}\n            type=\"text\"\n            value={inputValue}\n            onChange={handleInputChange}\n            onKeyDown={handleKeyDown}\n            onFocus={() => inputValue && setShowSuggestions(true)}\n            onBlur={() => setTimeout(() => setShowSuggestions(false), 200)}\n            placeholder={(Array.isArray(value) ? value : []).length === 0 ? placeholder : \"\"}\n            className=\"border-none shadow-none p-0 h-auto bg-transparent focus-visible:ring-0 flex-1 min-w-[120px]\"\n            data-testid=\"tile-input\"\n          />\n        )}\n      </div>\n\n      {/* Suggestions dropdown */}\n      {showSuggestions && filteredSuggestions.length > 0 && (\n        <div className=\"absolute top-full left-0 right-0 z-50 bg-background border border-input rounded-md shadow-md mt-1 max-h-48 overflow-y-auto\">\n          {filteredSuggestions.slice(0, 8).map((suggestion, index) => (\n            <button\n              key={index}\n              type=\"button\"\n              onClick={() => handleSuggestionClick(suggestion)}\n              className=\"w-full px-3 py-2 text-left hover:bg-muted transition-colors text-sm\"\n              data-testid={`suggestion-${suggestion}`}\n            >\n              {suggestion}\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":4828},"client/src/components/FilterBar.tsx":{"content":"import { useState } from \"react\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card } from \"@/components/ui/card\";\n\nexport interface FilterState {\n  courseCode: string;\n  building: string;\n  floor: string;\n  publicOnly: boolean;\n}\n\ninterface FilterBarProps {\n  onFilterChange: (filters: FilterState) => void;\n  className?: string;\n}\n\nconst COURSES = [\n  { code: \"BU111\", name: \"BU111 - Intro to Business\" },\n  { code: \"CP102\", name: \"CP102 - Computer Programming\" },\n  { code: \"EC120\", name: \"EC120 - Intro to Economics\" },\n  { code: \"MA103\", name: \"MA103 - Calculus I\" },\n  { code: \"DATA205\", name: \"DATA205 - Data Analytics\" },\n  { code: \"STAT231\", name: \"STAT231 - Statistics\" },\n  { code: \"PS101\", name: \"PS101 - Introduction to Psychology\" },\n];\n\nconst BUILDINGS = [\n  \"Library\",\n  \"Lazaridis Hall\", \n  \"Peters\",\n  \"Science\",\n  \"Arts\",\n  \"Athletic Complex\"\n];\n\nconst FLOORS = [\"1\", \"2\", \"3\", \"4\", \"5\"];\n\nexport function FilterBar({ onFilterChange, className }: FilterBarProps) {\n  const [filters, setFilters] = useState<FilterState>({\n    courseCode: \"all\",\n    building: \"all\", \n    floor: \"all\",\n    publicOnly: true\n  });\n\n  const handleFilterChange = (key: keyof FilterState, value: string | boolean) => {\n    // Convert \"all\" back to empty string for filtering logic\n    const filterValue = typeof value === 'string' && value === 'all' ? '' : value;\n    const newFilters = { ...filters, [key]: filterValue };\n    setFilters(newFilters);\n    onFilterChange(newFilters);\n  };\n\n  return (\n    <Card className={`p-6 ${className}`} data-testid=\"filter-bar\">\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"course-filter\">Course</Label>\n          <Select\n            value={filters.courseCode}\n            onValueChange={(value) => handleFilterChange(\"courseCode\", value)}\n          >\n            <SelectTrigger data-testid=\"select-course\">\n              <SelectValue placeholder=\"All Courses\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Courses</SelectItem>\n              {COURSES.map((course) => (\n                <SelectItem key={course.code} value={course.code}>\n                  {course.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"building-filter\">Building</Label>\n          <Select\n            value={filters.building}\n            onValueChange={(value) => handleFilterChange(\"building\", value)}\n          >\n            <SelectTrigger data-testid=\"select-building\">\n              <SelectValue placeholder=\"All Buildings\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Buildings</SelectItem>\n              {BUILDINGS.map((building) => (\n                <SelectItem key={building} value={building}>\n                  {building}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"floor-filter\">Floor</Label>\n          <Select\n            value={filters.floor}\n            onValueChange={(value) => handleFilterChange(\"floor\", value)}\n          >\n            <SelectTrigger data-testid=\"select-floor\">\n              <SelectValue placeholder=\"All Floors\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Floors</SelectItem>\n              {FLOORS.map((floor) => (\n                <SelectItem key={floor} value={floor}>\n                  Floor {floor}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"flex items-end\">\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"public-filter\"\n              checked={filters.publicOnly}\n              onCheckedChange={(checked) => handleFilterChange(\"publicOnly\", checked as boolean)}\n              data-testid=\"checkbox-public-only\"\n            />\n            <Label htmlFor=\"public-filter\" className=\"text-sm font-medium\">\n              Public only\n            </Label>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":4484},"client/src/components/Logo.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface LogoProps {\n  className?: string;\n}\n\nexport function Logo({ className }: LogoProps) {\n  return (\n    <div className={cn(\"flex items-center space-x-2\", className)}>\n      <div className=\"owl-icon\" />\n      <span className=\"text-xl font-bold text-primary\">StudyBuddy</span>\n    </div>\n  );\n}\n","size_bytes":335},"client/src/components/NavBar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Logo } from \"./Logo\";\nimport { Button } from \"@/components/ui/button\";\nimport { Heart, Menu, X, User, LogIn, Loader2 } from \"lucide-react\";\nimport { useStore } from \"@/store/useStore\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function NavBar() {\n  const [location] = useLocation();\n  const { authUser, isAuthenticating, signInWithGoogle, signOut } = useStore();\n  const { toast } = useToast();\n\n  const handleSignIn = async () => {\n    try {\n      await signInWithGoogle();\n      toast({\n        title: \"Welcome!\",\n        description: \"You've successfully signed in with Google.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Sign In Failed\",\n        description: error.message || \"Failed to sign in. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSignOut = async () => {\n    try {\n      await signOut();\n      toast({\n        title: \"Signed Out\",\n        description: \"You've been successfully signed out.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Sign Out Failed\",\n        description: error.message || \"Failed to sign out. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const navLinks = [\n    { href: \"/\", label: \"Home\" },\n    { href: \"/app\", label: \"Sessions\" },\n    { href: \"/host\", label: \"Host\" },\n    { href: \"/donate\", label: \"❤️ Donate\" },\n  ];\n\n  const NavLinks = ({ mobile = false }: { mobile?: boolean }) => (\n    <>\n      {navLinks.map((link) => (\n        <Link\n          key={link.href}\n          href={link.href}\n          className={`text-muted-foreground hover:text-foreground transition-colors ${\n            location === link.href ? \"text-foreground font-medium\" : \"\"\n          } ${mobile ? \"block py-2\" : \"\"}`}\n        >\n          {link.label}\n        </Link>\n      ))}\n    </>\n  );\n\n  return (\n    <nav className=\"bg-card border-b border-border sticky top-0 z-50\" data-testid=\"navbar\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\" data-testid=\"logo-link\">\n            <Logo />\n          </Link>\n          \n          <div className=\"hidden md:flex items-center space-x-6\">\n            <NavLinks />\n            {authUser ? (\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"flex items-center space-x-2\">\n                  {authUser.photoURL ? (\n                    <img \n                      src={authUser.photoURL} \n                      alt={authUser.displayName || 'User'}\n                      className=\"w-8 h-8 rounded-full\"\n                    />\n                  ) : (\n                    <div className=\"w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm font-medium\">\n                      <User size={16} />\n                    </div>\n                  )}\n                  <span className=\"text-sm font-medium\">\n                    {authUser.displayName || authUser.email?.split('@')[0] || 'User'}\n                  </span>\n                </div>\n                <Button \n                  onClick={handleSignOut}\n                  disabled={isAuthenticating}\n                  size=\"sm\"\n                  data-testid=\"button-sign-out\"\n                >\n                  {isAuthenticating ? (\n                    <Loader2 size={16} className=\"animate-spin\" />\n                  ) : (\n                    \"Sign Out\"\n                  )}\n                </Button>\n              </div>\n            ) : (\n              <Button \n                onClick={handleSignIn}\n                disabled={isAuthenticating}\n                data-testid=\"button-sign-in\"\n              >\n                {isAuthenticating ? (\n                  <>\n                    <Loader2 size={16} className=\"animate-spin mr-2\" />\n                    Signing in...\n                  </>\n                ) : (\n                  <>\n                    <LogIn size={16} className=\"mr-2\" />\n                    Sign In with Google\n                  </>\n                )}\n              </Button>\n            )}\n          </div>\n\n          <Sheet>\n            <SheetTrigger asChild className=\"md:hidden\">\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-mobile-menu\">\n                <Menu className=\"h-6 w-6\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"right\" className=\"w-64\">\n              <div className=\"flex flex-col space-y-4 mt-8\">\n                <NavLinks mobile />\n                {authUser ? (\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-3 p-3 bg-muted rounded-lg\">\n                      {authUser.photoURL ? (\n                        <img \n                          src={authUser.photoURL} \n                          alt={authUser.displayName || 'User'}\n                          className=\"w-10 h-10 rounded-full\"\n                        />\n                      ) : (\n                        <div className=\"w-10 h-10 rounded-full bg-primary text-primary-foreground flex items-center justify-center\">\n                          <User size={20} />\n                        </div>\n                      )}\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium\">\n                          {authUser.displayName || 'User'}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {authUser.email}\n                        </p>\n                      </div>\n                    </div>\n                    <Button \n                      onClick={handleSignOut}\n                      disabled={isAuthenticating}\n                      className=\"w-full\"\n                      data-testid=\"button-mobile-sign-out\"\n                    >\n                      {isAuthenticating ? (\n                        <>\n                          <Loader2 size={16} className=\"animate-spin mr-2\" />\n                          Signing out...\n                        </>\n                      ) : (\n                        \"Sign Out\"\n                      )}\n                    </Button>\n                  </div>\n                ) : (\n                  <Button \n                    onClick={handleSignIn}\n                    disabled={isAuthenticating}\n                    className=\"w-full\"\n                    data-testid=\"button-mobile-sign-in\"\n                  >\n                    {isAuthenticating ? (\n                      <>\n                        <Loader2 size={16} className=\"animate-spin mr-2\" />\n                        Signing in...\n                      </>\n                    ) : (\n                      <>\n                        <LogIn size={16} className=\"mr-2\" />\n                        Sign In with Google\n                      </>\n                    )}\n                  </Button>\n                )}\n              </div>\n            </SheetContent>\n          </Sheet>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":7234},"client/src/components/ReportModal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ReportModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  sessionId: string | null;\n}\n\nconst REPORT_REASONS = [\n  { value: \"spam\", label: \"Spam\" },\n  { value: \"harassment\", label: \"Harassment\" },\n  { value: \"fake-location\", label: \"Fake location\" },\n  { value: \"inappropriate\", label: \"Inappropriate content\" },\n  { value: \"other\", label: \"Other\" },\n];\n\nexport function ReportModal({ isOpen, onClose, sessionId }: ReportModalProps) {\n  const [reason, setReason] = useState(\"\");\n  const [details, setDetails] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!reason || !sessionId) return;\n\n    setIsSubmitting(true);\n    \n    // Simulate API call\n    console.log(\"Report submitted:\", { sessionId, reason, details });\n    \n    setTimeout(() => {\n      toast({\n        title: \"Report submitted\",\n        description: \"Thanks — a moderator will review.\",\n      });\n      setIsSubmitting(false);\n      setReason(\"\");\n      setDetails(\"\");\n      onClose();\n    }, 500);\n  };\n\n  const handleClose = () => {\n    setReason(\"\");\n    setDetails(\"\");\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"modal-report\">\n        <DialogHeader>\n          <DialogTitle>Report Session</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"reason\">Reason *</Label>\n            <Select value={reason} onValueChange={setReason} required>\n              <SelectTrigger data-testid=\"select-report-reason\">\n                <SelectValue placeholder=\"Select reason...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {REPORT_REASONS.map((option) => (\n                  <SelectItem key={option.value} value={option.value}>\n                    {option.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"details\">Details (Optional)</Label>\n            <Textarea\n              id=\"details\"\n              value={details}\n              onChange={(e) => setDetails(e.target.value)}\n              placeholder=\"Please provide more details...\"\n              maxLength={300}\n              rows={4}\n              data-testid=\"textarea-report-details\"\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              {details.length}/300 characters\n            </p>\n          </div>\n\n          <div className=\"flex gap-3\">\n            <Button\n              type=\"submit\"\n              disabled={!reason || isSubmitting}\n              className=\"flex-1 bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-submit-report\"\n            >\n              {isSubmitting ? \"Submitting...\" : \"Submit Report\"}\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              data-testid=\"button-cancel-report\"\n            >\n              Cancel\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3837},"client/src/components/SessionCard.tsx":{"content":"import { Clock, MoreVertical } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Session } from \"@/types\";\nimport { useStore } from \"@/store/useStore\";\n\ninterface SessionCardProps {\n  session: Session;\n  onReport: (sessionId: string) => void;\n}\n\nexport function SessionCard({ session, onReport }: SessionCardProps) {\n  const { joinedSessions, joinSession, leaveSession } = useStore();\n  const isJoined = joinedSessions.has(session.id);\n  const isFull = session.attendeeCount >= session.capacity;\n  const progressPercent = (session.attendeeCount / session.capacity) * 100;\n\n  const handleToggleJoin = async () => {\n    try {\n      if (isJoined) {\n        await leaveSession(session.id);\n      } else if (!isFull) {\n        await joinSession(session.id);\n      }\n    } catch (error) {\n      console.error('Error toggling session join status:', error);\n    }\n  };\n\n  return (\n    <Card className=\"p-6 hover:shadow-md transition-shadow\" data-testid={`card-session-${session.id}`}>\n      <div className=\"flex justify-between items-start mb-4\">\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center space-x-2\">\n            <Badge variant=\"default\" className=\"bg-primary text-primary-foreground\">\n              {session.courseCode}\n            </Badge>\n            <Badge variant=\"secondary\" className=\"bg-muted text-muted-foreground\">\n              {session.building} Floor {session.floor}\n            </Badge>\n            {!session.public && (\n              <Badge variant=\"outline\" className=\"bg-yellow-100 text-yellow-800 border-yellow-300\">\n                Private\n              </Badge>\n            )}\n          </div>\n          <div className=\"flex items-center space-x-1 text-sm text-muted-foreground\">\n            <Clock className=\"w-4 h-4\" />\n            <span data-testid={`text-ends-${session.id}`}>Ends {session.endsAt}</span>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Avatar className=\"w-8 h-8\">\n            <AvatarFallback className=\"bg-primary text-primary-foreground text-sm\">\n              {session.host.initials}\n            </AvatarFallback>\n          </Avatar>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\" data-testid={`button-menu-${session.id}`}>\n                <MoreVertical className=\"w-4 h-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem \n                onClick={() => onReport(session.id)}\n                data-testid={`button-report-${session.id}`}\n                className=\"text-destructive\"\n              >\n                Report Session\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n\n      <div className=\"mb-4\">\n        <div className=\"flex justify-between items-center mb-2\">\n          <span className=\"text-sm font-medium text-foreground\">Capacity</span>\n          <span className=\"text-sm text-muted-foreground\" data-testid={`text-capacity-${session.id}`}>\n            {session.attendeeCount}/{session.capacity}\n          </span>\n        </div>\n        <Progress value={progressPercent} className=\"h-2\" />\n      </div>\n\n      {session.notes && (\n        <p className=\"text-sm text-muted-foreground mb-4 italic\" data-testid={`text-notes-${session.id}`}>\n          \"{session.notes}\"\n        </p>\n      )}\n\n      {session.locationImages && session.locationImages.length > 0 && (\n        <div className=\"mb-4\">\n          <p className=\"text-xs text-muted-foreground mb-2\">📍 Location Photos:</p>\n          <div className=\"grid grid-cols-3 gap-2\">\n            {session.locationImages.slice(0, 3).map((imageUrl, index) => (\n              <div \n                key={`${session.id}-image-${index}`} \n                className=\"relative aspect-square rounded-md overflow-hidden bg-muted\"\n              >\n                <img\n                  src={imageUrl}\n                  alt={`Study location ${index + 1}`}\n                  className=\"w-full h-full object-cover hover:scale-105 transition-transform duration-200\"\n                  data-testid={`location-image-${session.id}-${index}`}\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      <div className=\"flex justify-between items-center\">\n        <span className=\"text-sm text-muted-foreground\" data-testid={`text-host-${session.id}`}>\n          Host: {session.host.name}\n        </span>\n        <Button\n          onClick={handleToggleJoin}\n          disabled={isFull && !isJoined}\n          variant={isJoined ? \"outline\" : \"default\"}\n          size=\"sm\"\n          data-testid={`button-join-${session.id}`}\n          className={\n            isJoined \n              ? \"border-muted-foreground text-muted-foreground hover:bg-muted\" \n              : isFull \n                ? \"bg-muted text-muted-foreground cursor-not-allowed\" \n                : \"bg-primary text-primary-foreground hover:opacity-90\"\n          }\n        >\n          {isJoined ? \"Leave\" : isFull ? \"Full\" : \"Join\"}\n        </Button>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":5574},"client/src/components/StripeCheckout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport {\n  Elements,\n  PaymentElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Use testing public key if available, fallback to regular public key\nconst stripePublicKey = import.meta.env.TESTING_VITE_STRIPE_PUBLIC_KEY || import.meta.env.VITE_STRIPE_PUBLIC_KEY;\n\nif (!stripePublicKey) {\n  throw new Error('Missing required Stripe public key');\n}\n\nconst stripePromise = loadStripe(stripePublicKey);\n\ninterface CheckoutFormProps {\n  amount: number;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nfunction CheckoutForm({ amount, onSuccess, onCancel }: CheckoutFormProps) {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (!stripe || !elements) {\n      console.log(\"Stripe not ready\");\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const { error, paymentIntent } = await stripe.confirmPayment({\n        elements,\n        confirmParams: {\n          return_url: `${window.location.origin}/donate?success=true`,\n        },\n        redirect: \"if_required\",\n      });\n\n      if (error) {\n        console.error(\"Payment error:\", error);\n        toast({\n          title: \"Payment Failed\",\n          description: error.message || \"There was an error processing your payment.\",\n          variant: \"destructive\",\n        });\n      } else if (paymentIntent && paymentIntent.status === \"succeeded\") {\n        toast({\n          title: \"Thank you!\",\n          description: `Your $${amount} donation helps keep StudyBuddy free!`,\n        });\n        onSuccess();\n      }\n    } catch (err) {\n      console.error(\"Payment processing error:\", err);\n      toast({\n        title: \"Payment Error\",\n        description: \"An unexpected error occurred. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <PaymentElement />\n      <div className=\"flex gap-3\">\n        <Button\n          type=\"submit\"\n          disabled={!stripe || !elements || isLoading}\n          className=\"flex-1 bg-primary text-primary-foreground hover:opacity-90\"\n        >\n          {isLoading ? \"Processing...\" : `Donate $${amount}`}\n        </Button>\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={onCancel}\n          disabled={isLoading}\n        >\n          Cancel\n        </Button>\n      </div>\n    </form>\n  );\n}\n\ninterface StripeCheckoutProps {\n  amount: number;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport function StripeCheckout({ amount, onSuccess, onCancel }: StripeCheckoutProps) {\n  const [clientSecret, setClientSecret] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Create PaymentIntent when component mounts\n    const createPaymentIntent = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        \n        const response = await fetch(\"/api/create-payment-intent\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ amount }),\n        });\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        \n        if (data.clientSecret) {\n          setClientSecret(data.clientSecret);\n        } else {\n          throw new Error(\"No client secret received\");\n        }\n      } catch (err) {\n        console.error(\"Payment setup error:\", err);\n        const errorMessage = err instanceof Error ? err.message : \"Unknown error\";\n        setError(errorMessage);\n        toast({\n          title: \"Payment Setup Failed\",\n          description: \"Failed to initialize payment. Please try again.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    createPaymentIntent();\n  }, [amount, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        <p className=\"mt-2 text-sm text-muted-foreground\">Setting up payment...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-4 text-center space-y-4\">\n        <p className=\"text-sm text-destructive\">Payment setup failed: {error}</p>\n        <Button onClick={onCancel} variant=\"outline\">Go Back</Button>\n      </div>\n    );\n  }\n\n  if (!clientSecret) {\n    return (\n      <div className=\"p-4 text-center space-y-4\">\n        <p className=\"text-sm text-muted-foreground\">Unable to setup payment</p>\n        <Button onClick={onCancel} variant=\"outline\">Go Back</Button>\n      </div>\n    );\n  }\n\n  return (\n    <Elements stripe={stripePromise} options={{ clientSecret }}>\n      <CheckoutForm amount={amount} onSuccess={onSuccess} onCancel={onCancel} />\n    </Elements>\n  );\n}","size_bytes":5519},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { \n  signInWithPopup, \n  signInWithRedirect, \n  getRedirectResult, \n  signOut, \n  onAuthStateChanged,\n  GoogleAuthProvider,\n  User\n} from 'firebase/auth';\nimport { auth } from './firebase';\n\n// Initialize Google Auth Provider\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.addScope('email');\ngoogleProvider.addScope('profile');\n\nexport interface AuthUser {\n  uid: string;\n  email: string | null;\n  displayName: string | null;\n  photoURL: string | null;\n}\n\n// Convert Firebase User to our AuthUser type\nexport function transformUser(user: User | null): AuthUser | null {\n  if (!user) return null;\n  \n  return {\n    uid: user.uid,\n    email: user.email,\n    displayName: user.displayName,\n    photoURL: user.photoURL,\n  };\n}\n\n// Sign in with Google using popup (preferred for desktop)\nexport async function signInWithGooglePopup(): Promise<AuthUser | null> {\n  try {\n    const result = await signInWithPopup(auth, googleProvider);\n    return transformUser(result.user);\n  } catch (error) {\n    console.error('Error signing in with Google popup:', error);\n    throw error;\n  }\n}\n\n// Sign in with Google using redirect (fallback for mobile)\nexport async function signInWithGoogleRedirect(): Promise<void> {\n  try {\n    await signInWithRedirect(auth, googleProvider);\n  } catch (error) {\n    console.error('Error signing in with Google redirect:', error);\n    throw error;\n  }\n}\n\n// Handle redirect result (call on app startup)\nexport async function handleRedirectResult(): Promise<AuthUser | null> {\n  try {\n    const result = await getRedirectResult(auth);\n    return result ? transformUser(result.user) : null;\n  } catch (error) {\n    console.error('Error handling redirect result:', error);\n    throw error;\n  }\n}\n\n// Sign out\nexport async function signOutUser(): Promise<void> {\n  try {\n    await signOut(auth);\n  } catch (error) {\n    console.error('Error signing out:', error);\n    throw error;\n  }\n}\n\n// Listen to auth state changes\nexport function onAuthStateChange(callback: (user: AuthUser | null) => void) {\n  return onAuthStateChanged(auth, (user) => {\n    callback(transformUser(user));\n  });\n}\n\n// Get current user\nexport function getCurrentUser(): AuthUser | null {\n  return transformUser(auth.currentUser);\n}","size_bytes":2244},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from 'firebase/app';\nimport { getFirestore } from 'firebase/firestore';\nimport { getAuth } from 'firebase/auth';\nimport { getStorage } from 'firebase/storage';\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase services\nexport const db = getFirestore(app);\nexport const auth = getAuth(app);\nexport const storage = getStorage(app);\n\nexport default app;","size_bytes":787},"client/src/lib/firebaseService.ts":{"content":"import { \n  collection, \n  addDoc, \n  updateDoc, \n  deleteDoc, \n  doc, \n  onSnapshot, \n  query, \n  orderBy,\n  Timestamp,\n  serverTimestamp \n} from 'firebase/firestore';\nimport { \n  ref, \n  uploadBytes, \n  getDownloadURL, \n  deleteObject \n} from 'firebase/storage';\nimport { db, storage } from './firebase';\nimport { Session, CreateSessionData } from '@/types';\n\nexport interface FirebaseSession extends Omit<Session, 'id' | 'endsAt'> {\n  id?: string;\n  endsAt: Timestamp;\n  createdAt: Timestamp;\n}\n\n// Convert Firebase session to app session format\nexport const convertFirebaseSession = (doc: any): Session => {\n  const data = doc.data();\n  const now = new Date();\n  const endTime = data.endsAt.toDate();\n  const timeDiff = endTime.getTime() - now.getTime();\n  const minutesRemaining = Math.max(0, Math.floor(timeDiff / (1000 * 60)));\n  \n  let timeString = 'ended';\n  if (minutesRemaining > 0) {\n    if (minutesRemaining < 60) {\n      timeString = `in ${minutesRemaining}m`;\n    } else {\n      const hours = Math.floor(minutesRemaining / 60);\n      const mins = minutesRemaining % 60;\n      timeString = `in ${hours}h ${mins}m`;\n    }\n  }\n\n  return {\n    id: doc.id,\n    courseCode: data.courseCode,\n    building: data.building,\n    floor: data.floor,\n    capacity: data.capacity,\n    attendeeCount: data.attendeeCount,\n    public: data.public,\n    endsAt: timeString,\n    host: data.host,\n    notes: data.notes,\n    area: data.area,\n    duration: data.duration,\n    locationImages: data.locationImages || []\n  };\n};\n\n// Subscribe to all sessions\nexport const subscribeToSessions = (callback: (sessions: Session[]) => void) => {\n  const q = query(collection(db, 'sessions'), orderBy('createdAt', 'desc'));\n  \n  return onSnapshot(q, (querySnapshot) => {\n    const sessions: Session[] = [];\n    querySnapshot.forEach((doc) => {\n      const session = convertFirebaseSession(doc);\n      // Only include sessions that haven't ended\n      if (session.endsAt !== 'ended') {\n        sessions.push(session);\n      }\n    });\n    callback(sessions);\n  });\n};\n\n// Create a new session\nexport const createSession = async (sessionData: CreateSessionData, host: { name: string; initials: string }): Promise<string> => {\n  const now = new Date();\n  const endTime = new Date(now.getTime() + sessionData.duration * 60000);\n  \n  const firebaseSession: Omit<FirebaseSession, 'id'> = {\n    ...sessionData,\n    attendeeCount: 1,\n    endsAt: Timestamp.fromDate(endTime),\n    host,\n    createdAt: serverTimestamp() as Timestamp\n  };\n\n  const docRef = await addDoc(collection(db, 'sessions'), firebaseSession);\n  return docRef.id;\n};\n\n// Join a session\nexport const joinSession = async (sessionId: string): Promise<void> => {\n  const sessionRef = doc(db, 'sessions', sessionId);\n  // Note: In a real app, you'd want to use a transaction to prevent race conditions\n  // For now, we'll use a simple update\n  const sessionDoc = await import('firebase/firestore').then(({ getDoc }) => getDoc(sessionRef));\n  \n  if (sessionDoc.exists()) {\n    const currentCount = sessionDoc.data().attendeeCount || 0;\n    const capacity = sessionDoc.data().capacity || 0;\n    \n    if (currentCount < capacity) {\n      await updateDoc(sessionRef, {\n        attendeeCount: currentCount + 1\n      });\n    } else {\n      throw new Error('Session is full');\n    }\n  }\n};\n\n// Leave a session\nexport const leaveSession = async (sessionId: string): Promise<void> => {\n  const sessionRef = doc(db, 'sessions', sessionId);\n  const sessionDoc = await import('firebase/firestore').then(({ getDoc }) => getDoc(sessionRef));\n  \n  if (sessionDoc.exists()) {\n    const currentCount = sessionDoc.data().attendeeCount || 1;\n    await updateDoc(sessionRef, {\n      attendeeCount: Math.max(1, currentCount - 1)\n    });\n  }\n};\n\n// Delete a session (for cleanup)\nexport const deleteSession = async (sessionId: string): Promise<void> => {\n  await deleteDoc(doc(db, 'sessions', sessionId));\n};\n\n// Upload location images to Firebase Storage\nexport const uploadLocationImages = async (files: File[]): Promise<string[]> => {\n  const uploadPromises = files.map(async (file) => {\n    // Create a unique filename using timestamp and random string\n    const timestamp = Date.now();\n    const randomId = Math.random().toString(36).substring(2);\n    const fileName = `location-images/${timestamp}-${randomId}-${file.name}`;\n    \n    const storageRef = ref(storage, fileName);\n    \n    try {\n      // Upload the file\n      const snapshot = await uploadBytes(storageRef, file);\n      // Get the download URL\n      const downloadURL = await getDownloadURL(snapshot.ref);\n      return downloadURL;\n    } catch (error) {\n      console.error('Error uploading image:', error);\n      throw new Error(`Failed to upload image: ${file.name}`);\n    }\n  });\n\n  // Wait for all uploads to complete\n  return Promise.all(uploadPromises);\n};\n\n// Delete location images from Firebase Storage\nexport const deleteLocationImages = async (imageUrls: string[]): Promise<void> => {\n  const deletePromises = imageUrls.map(async (url) => {\n    try {\n      // Extract the path from the URL\n      const urlObj = new URL(url);\n      const path = decodeURIComponent(urlObj.pathname.split('/o/')[1].split('?')[0]);\n      const imageRef = ref(storage, path);\n      await deleteObject(imageRef);\n    } catch (error) {\n      console.error('Error deleting image:', error);\n      // Don't throw here to allow partial cleanup\n    }\n  });\n\n  await Promise.all(deletePromises);\n};","size_bytes":5463},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatTimeRemaining(minutes: number): string {\n  if (minutes < 60) {\n    return `in ${minutes}m`;\n  }\n  const hours = Math.floor(minutes / 60);\n  const remainingMinutes = minutes % 60;\n  return `in ${hours}h ${remainingMinutes}m`;\n}\n\nexport function generateInitials(name: string): string {\n  return name\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase())\n    .join('')\n    .slice(0, 2);\n}\n","size_bytes":585},"client/src/pages/Donate.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Heart } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { StripeCheckout } from \"@/components/StripeCheckout\";\n\nexport function Donate() {\n  const [customAmount, setCustomAmount] = useState(\"\");\n  const [selectedAmount, setSelectedAmount] = useState<number | null>(null);\n  const [showCheckout, setShowCheckout] = useState(false);\n  const { toast } = useToast();\n\n  const handleDonate = (amount: number | string) => {\n    const donationAmount = typeof amount === \"string\" ? parseFloat(amount) : amount;\n    if (!donationAmount || donationAmount <= 0) {\n      toast({\n        title: \"Invalid amount\",\n        description: \"Please enter a valid donation amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setSelectedAmount(donationAmount);\n    setShowCheckout(true);\n  };\n\n  const handleCheckoutSuccess = () => {\n    setShowCheckout(false);\n    setSelectedAmount(null);\n    setCustomAmount(\"\");\n    // Success message is handled by StripeCheckout component\n  };\n\n  const handleCheckoutCancel = () => {\n    setShowCheckout(false);\n    setSelectedAmount(null);\n  };\n\n  return (\n    <div className=\"min-h-screen py-16 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-2xl mx-auto text-center\">\n        <div className=\"mb-8\">\n          <div className=\"w-16 h-16 bg-secondary rounded-full mx-auto mb-4 flex items-center justify-center\">\n            <Heart className=\"w-8 h-8 text-secondary-foreground\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-foreground mb-4\">Support StudyBuddy</h1>\n          <p className=\"text-lg text-muted-foreground\">\n            Optional tips keep StudyBuddy free for students like you.\n          </p>\n        </div>\n\n        <Card>\n          <CardContent className=\"pt-8\">\n            {showCheckout && selectedAmount ? (\n              <StripeCheckout\n                amount={selectedAmount}\n                onSuccess={handleCheckoutSuccess}\n                onCancel={handleCheckoutCancel}\n              />\n            ) : (\n              <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-3 gap-4\">\n                <Button\n                  onClick={() => handleDonate(3)}\n                  className=\"bg-primary text-primary-foreground py-4 hover:opacity-90\"\n                  data-testid=\"button-donate-3\"\n                >\n                  $3\n                </Button>\n                <Button\n                  onClick={() => handleDonate(5)}\n                  className=\"bg-primary text-primary-foreground py-4 hover:opacity-90\"\n                  data-testid=\"button-donate-5\"\n                >\n                  $5\n                </Button>\n                <Button\n                  onClick={() => handleDonate(10)}\n                  className=\"bg-primary text-primary-foreground py-4 hover:opacity-90\"\n                  data-testid=\"button-donate-10\"\n                >\n                  $10\n                </Button>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"custom-amount\">Custom Amount</Label>\n                <div className=\"relative\">\n                  <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">\n                    $\n                  </span>\n                  <Input\n                    id=\"custom-amount\"\n                    type=\"number\"\n                    placeholder=\"0.00\"\n                    min=\"1\"\n                    step=\"0.01\"\n                    value={customAmount}\n                    onChange={(e) => setCustomAmount(e.target.value)}\n                    className=\"pl-8\"\n                    data-testid=\"input-custom-amount\"\n                  />\n                </div>\n              </div>\n\n              <Button\n                onClick={() => handleDonate(customAmount)}\n                className=\"w-full bg-secondary text-secondary-foreground hover:opacity-90\"\n                data-testid=\"button-donate-custom\"\n              >\n                Donate Now\n              </Button>\n\n              <Link href=\"/app\">\n                <Button \n                  variant=\"ghost\" \n                  className=\"text-muted-foreground hover:text-foreground\"\n                  data-testid=\"button-maybe-later\"\n                >\n                  Maybe later\n                </Button>\n              </Link>\n            </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <div className=\"mt-8 text-sm text-muted-foreground max-w-lg mx-auto\">\n          <p>\n            Your contribution helps us maintain servers, improve features, and keep StudyBuddy \n            accessible to all Laurier students.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4995},"client/src/pages/Host.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { CheckCircle } from \"lucide-react\";\nimport { useStore } from \"@/store/useStore\";\nimport { CreateSessionData } from \"@/types\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { uploadLocationImages } from \"@/lib/firebaseService\";\nimport { DynamicTileInput } from \"@/components/DynamicTileInput\";\nimport { ImageUpload } from \"@/components/ImageUpload\";\n\nconst hostSessionSchema = z.object({\n  courseCode: z.array(z.string()).min(1, \"At least one course is required\"),\n  building: z.array(z.string()).min(1, \"At least one building is required\"),\n  floor: z.string().min(1, \"Floor is required\"),\n  area: z.string().optional(),\n  capacity: z.string().min(1, \"Capacity is required\"),\n  duration: z.string().min(1, \"Duration is required\"),\n  notes: z.string().max(100, \"Notes must be 100 characters or less\").optional(),\n  public: z.boolean().default(true),\n  locationImages: z.array(z.instanceof(File))\n    .max(3, \"Maximum 3 images allowed\")\n    .optional()\n    .refine((files) => !files || files.every(file => file.size <= 5 * 1024 * 1024), {\n      message: \"Each image must be smaller than 5MB\"\n    })\n    .refine((files) => !files || files.every(file => \n      ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'].includes(file.type)\n    ), {\n      message: \"Only JPEG, PNG, and WebP images are allowed\"\n    }),\n});\n\ntype HostSessionFormData = z.infer<typeof hostSessionSchema>;\n\n// Common Laurier courses - this would normally come from an API\nconst COURSES = [\n  \"AC111\", \"AC120\", \"AC210\", \"AC220\", \"AC310\", \"AC320\", \"AC415\", \"AC430\",\n  \"BU111\", \"BU121\", \"BU127\", \"BU201\", \"BU231\", \"BU247\", \"BU352\", \"BU354\", \"BU362\", \"BU375\", \"BU385\", \"BU398\", \"BU453\", \"BU481\", \"BU491\",\n  \"CP102\", \"CP104\", \"CP164\", \"CP213\", \"CP216\", \"CP264\", \"CP312\", \"CP313\", \"CP315\", \"CP316\", \"CP317\", \"CP363\", \"CP372\", \"CP373\", \"CP400\", \"CP411\", \"CP414\", \"CP423\", \"CP460\", \"CP468\", \"CP476\", \"CP493\",\n  \"DATA205\", \"DATA206\", \"DATA301\", \"DATA302\", \"DATA401\", \"DATA402\",\n  \"EC120\", \"EC140\", \"EC201\", \"EC205\", \"EC206\", \"EC225\", \"EC238\", \"EC255\", \"EC280\", \"EC285\", \"EC301\", \"EC302\", \"EC327\", \"EC336\", \"EC349\", \"EC375\", \"EC395\", \"EC401\", \"EC421\", \"EC435\", \"EC455\",\n  \"EN101\", \"EN110\", \"EN111\", \"EN155\", \"EN206\", \"EN208\", \"EN209\", \"EN210\", \"EN211\", \"EN238\", \"EN255\", \"EN256\", \"EN270\", \"EN280\", \"EN285\", \"EN301\", \"EN315\", \"EN317\", \"EN325\", \"EN355\", \"EN375\", \"EN380\", \"EN390\",\n  \"FI270\", \"FI301\", \"FI302\", \"FI310\", \"FI320\", \"FI401\", \"FI402\", \"FI475\", \"FI495\",\n  \"HI109\", \"HI110\", \"HI115\", \"HI129\", \"HI201\", \"HI206\", \"HI220\", \"HI226\", \"HI235\", \"HI240\", \"HI245\", \"HI250\", \"HI301\", \"HI315\", \"HI320\", \"HI335\", \"HI345\", \"HI375\", \"HI380\", \"HI395\",\n  \"MA103\", \"MA104\", \"MA110\", \"MA122\", \"MA129\", \"MA201\", \"MA205\", \"MA238\", \"MA240\", \"MA260\", \"MA270\", \"MA303\", \"MA304\", \"MA310\", \"MA320\", \"MA333\", \"MA340\", \"MA355\", \"MA370\", \"MA371\", \"MA375\", \"MA395\", \"MA401\", \"MA420\", \"MA440\", \"MA475\",\n  \"MK210\", \"MK301\", \"MK302\", \"MK320\", \"MK401\", \"MK410\", \"MK415\", \"MK420\", \"MK475\", \"MK490\",\n  \"PC131\", \"PC132\", \"PC141\", \"PC142\", \"PC210\", \"PC231\", \"PC232\", \"PC241\", \"PC242\", \"PC270\", \"PC275\", \"PC310\", \"PC320\", \"PC331\", \"PC335\", \"PC341\", \"PC342\", \"PC370\", \"PC375\", \"PC410\", \"PC420\", \"PC441\", \"PC470\", \"PC475\",\n  \"PS101\", \"PS102\", \"PS201\", \"PS205\", \"PS210\", \"PS220\", \"PS240\", \"PS261\", \"PS270\", \"PS280\", \"PS290\", \"PS301\", \"PS305\", \"PS310\", \"PS315\", \"PS320\", \"PS325\", \"PS340\", \"PS345\", \"PS350\", \"PS355\", \"PS365\", \"PS370\", \"PS375\", \"PS380\", \"PS385\", \"PS390\", \"PS395\", \"PS401\", \"PS410\", \"PS415\", \"PS420\", \"PS425\", \"PS430\", \"PS435\", \"PS440\", \"PS445\", \"PS450\", \"PS455\", \"PS460\", \"PS465\", \"PS470\", \"PS475\", \"PS480\", \"PS485\", \"PS490\", \"PS495\",\n  \"STAT231\", \"STAT260\", \"STAT330\", \"STAT331\", \"STAT337\", \"STAT340\", \"STAT350\", \"STAT355\", \"STAT430\", \"STAT431\", \"STAT437\", \"STAT455\", \"STAT475\"\n];\n\n// Wilfrid Laurier University buildings and locations\nconst BUILDINGS = [\n  \"Aird Centre\", \"Arts Building\", \"Athletic Complex\", \"Balsillie School\",\n  \"Bricker Academic Building\", \"Central Teaching Building\", \"Clara Conrad Hall\",\n  \"Concourse Building\", \"Conrad Hall\", \"Dr. Alvin Woods Building\",\n  \"Euler Hall\", \"Faculty of Music Building\", \"Frank C. Peters Building\",\n  \"Graduate Student Centre\", \"Hazel McCallion Academic Learning Centre\",\n  \"John Aird Centre\", \"King Street Residence\", \"Lazaridis Hall\",\n  \"Library\", \"Little House Residence\", \"MacDonald House Residence\",\n  \"Memorial Hall\", \"Paul Martin Centre\", \"Peters Building\",\n  \"Residence Commons\", \"Science Building\", \"Seminary Building\",\n  \"Student Services Building\", \"Turret Building\", \"University Stadium\",\n  \"Waterloo Lutheran Seminary\", \"Willison Hall\", \"Woods Building\"\n];\n\nconst AREAS = [\n  \"Quiet Zone\",\n  \"Group Area\",\n  \"Computer Lab\",\n  \"Study Rooms\"\n];\n\nexport function Host() {\n  const [, setLocation] = useLocation();\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [createdSession, setCreatedSession] = useState<any>(null);\n  const { addSession } = useStore();\n  const { toast } = useToast();\n\n  const form = useForm<HostSessionFormData>({\n    resolver: zodResolver(hostSessionSchema),\n    defaultValues: {\n      courseCode: [],\n      building: [],\n      floor: \"\",\n      area: \"\",\n      capacity: \"\",\n      duration: \"\",\n      notes: \"\",\n      public: true,\n      locationImages: [],\n    },\n  });\n\n  const onSubmit = async (data: HostSessionFormData) => {\n    try {\n      // Upload images first if any are provided\n      let locationImageUrls: string[] = [];\n      if (data.locationImages && data.locationImages.length > 0) {\n        try {\n          locationImageUrls = await uploadLocationImages(data.locationImages);\n        } catch (imageError) {\n          toast({\n            title: \"Image upload failed\",\n            description: \"Session will be created without images. You can add them later.\",\n            variant: \"destructive\",\n          });\n        }\n      }\n\n      const sessionData: CreateSessionData = {\n        courseCode: data.courseCode[0] || \"\", // Take first course for now\n        building: data.building[0] || \"\", // Take first building for now  \n        floor: data.floor,\n        area: data.area,\n        capacity: parseInt(data.capacity),\n        duration: parseInt(data.duration),\n        notes: data.notes,\n        public: data.public,\n        locationImages: locationImageUrls,\n      };\n\n      const sessionId = await addSession(sessionData);\n      \n      // Create a session object for display\n      const createdSessionForDisplay = {\n        id: sessionId,\n        ...sessionData,\n        attendeeCount: 1,\n        endsAt: `in ${sessionData.duration}m`,\n        host: { name: \"You\", initials: \"YU\" }\n      };\n      \n      setCreatedSession(createdSessionForDisplay);\n      setShowSuccess(true);\n      toast({\n        title: \"Session created!\",\n        description: \"Your study session is now live and visible to other students.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error creating session\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (showSuccess && createdSession) {\n    return (\n      <div className=\"min-h-screen py-8 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-2xl mx-auto\">\n          <Card data-testid=\"success-state\">\n            <CardContent className=\"pt-8\">\n              <div className=\"text-center space-y-6\">\n                <div className=\"w-16 h-16 bg-green-100 rounded-full mx-auto flex items-center justify-center\">\n                  <CheckCircle className=\"w-8 h-8 text-green-600\" />\n                </div>\n                \n                <div>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                    Session Created!\n                  </h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    Your study session is now live and visible to other students.\n                  </p>\n                </div>\n\n                {/* Session Preview */}\n                <div className=\"bg-muted rounded-lg p-4 text-left\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"bg-primary text-primary-foreground px-2 py-1 rounded text-sm font-medium\">\n                        {createdSession.courseCode}\n                      </span>\n                      <span className=\"bg-card text-foreground px-2 py-1 rounded text-sm border\">\n                        {createdSession.building} Floor {createdSession.floor}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Capacity: {createdSession.attendeeCount}/{createdSession.capacity}\n                    </p>\n                    {createdSession.notes && (\n                      <p className=\"text-sm text-muted-foreground italic\">\n                        \"{createdSession.notes}\"\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                <Button \n                  onClick={() => setLocation(\"/app\")}\n                  className=\"bg-primary text-primary-foreground hover:opacity-90\"\n                  data-testid=\"button-go-to-sessions\"\n                >\n                  Go to Sessions\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen py-8 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">Host a Study Session</h1>\n          <p className=\"text-muted-foreground\">Create a new study group for your course</p>\n        </div>\n\n        <Card data-testid=\"host-form\">\n          <CardContent className=\"pt-8\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"courseCode\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Course Code *</FormLabel>\n                        <FormControl>\n                          <DynamicTileInput\n                            value={field.value}\n                            onChange={field.onChange}\n                            suggestions={COURSES}\n                            placeholder=\"Type course code (e.g., BU111, CP102)...\"\n                            maxItems={3}\n                            data-testid=\"input-host-course\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"building\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Building *</FormLabel>\n                        <FormControl>\n                          <DynamicTileInput\n                            value={field.value}\n                            onChange={field.onChange}\n                            suggestions={BUILDINGS}\n                            placeholder=\"Type building name (e.g., Library, Lazaridis)...\"\n                            maxItems={2}\n                            data-testid=\"input-host-building\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"floor\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Floor *</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-host-floor\">\n                              <SelectValue placeholder=\"Select floor...\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {[\"1\", \"2\", \"3\", \"4\", \"5\"].map((floor) => (\n                              <SelectItem key={floor} value={floor}>\n                                Floor {floor}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"area\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Area (Optional)</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-host-area\">\n                              <SelectValue placeholder=\"Select area...\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {AREAS.map((area) => (\n                              <SelectItem key={area} value={area}>\n                                {area}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"capacity\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Capacity *</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-host-capacity\">\n                              <SelectValue placeholder=\"Select capacity...\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {[2, 3, 4, 5, 6, 7, 8].map((capacity) => (\n                              <SelectItem key={capacity} value={capacity.toString()}>\n                                {capacity} people\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"duration\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Duration *</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-host-duration\">\n                              <SelectValue placeholder=\"Select duration...\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"60\">60 minutes</SelectItem>\n                            <SelectItem value=\"90\">90 minutes</SelectItem>\n                            <SelectItem value=\"120\">120 minutes</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          placeholder=\"e.g., Case prep, quiet please...\"\n                          className=\"resize-none\"\n                          rows={3}\n                          maxLength={100}\n                          data-testid=\"textarea-host-notes\"\n                        />\n                      </FormControl>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {field.value?.length || 0}/100 characters\n                      </p>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Location Images Upload */}\n                <FormField\n                  control={form.control}\n                  name=\"locationImages\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location Photos (Optional)</FormLabel>\n                      <FormControl>\n                        <ImageUpload\n                          images={field.value || []}\n                          onChange={field.onChange}\n                          maxImages={3}\n                          maxSizeMB={5}\n                          data-testid=\"input-location-images\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"public\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                      <FormControl>\n                        <Checkbox\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"checkbox-host-public\"\n                        />\n                      </FormControl>\n                      <div className=\"space-y-1 leading-none\">\n                        <FormLabel>Make this session public</FormLabel>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Public sessions are visible to all students\n                        </p>\n                      </div>\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex gap-4\">\n                  <Button \n                    type=\"submit\" \n                    className=\"flex-1 bg-primary text-primary-foreground hover:opacity-90\"\n                    data-testid=\"button-create-session\"\n                  >\n                    Create Session\n                  </Button>\n                  <Link href=\"/app\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\"\n                      data-testid=\"button-cancel-host\"\n                    >\n                      Cancel\n                    </Button>\n                  </Link>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20186},"client/src/pages/Landing.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { MapPin, BookOpen, Shield } from \"lucide-react\";\n\nexport function Landing() {\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h1 className=\"text-4xl md:text-6xl font-bold text-foreground mb-6\">\n            Find a study group by course—\n            <span className=\"text-primary\"> on campus, in real time.</span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Built for Wilfrid Laurier students. Privacy-first: building/floor only.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/app\">\n              <Button \n                size=\"lg\" \n                className=\"bg-primary text-primary-foreground hover:opacity-90 px-8 py-4 text-lg font-semibold\"\n                data-testid=\"button-browse-sessions\"\n              >\n                Browse Sessions\n              </Button>\n            </Link>\n            <Link href=\"/host\">\n              <Button \n                variant=\"outline\" \n                size=\"lg\"\n                className=\"border-primary text-primary hover:bg-primary hover:text-primary-foreground px-8 py-4 text-lg font-semibold\"\n                data-testid=\"button-host-session\"\n              >\n                Host a Session\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-muted\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-primary rounded-lg mx-auto mb-4 flex items-center justify-center\">\n                <MapPin className=\"w-6 h-6 text-primary-foreground\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Find by Location</h3>\n              <p className=\"text-muted-foreground\">\n                Browse study sessions by building and floor on campus\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-secondary rounded-lg mx-auto mb-4 flex items-center justify-center\">\n                <BookOpen className=\"w-6 h-6 text-secondary-foreground\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Course-Specific</h3>\n              <p className=\"text-muted-foreground\">\n                Filter by your exact course code to find relevant study groups\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-primary rounded-lg mx-auto mb-4 flex items-center justify-center\">\n                <Shield className=\"w-6 h-6 text-primary-foreground\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Privacy First</h3>\n              <p className=\"text-muted-foreground\">\n                No GPS tracking - just building and floor for your safety\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-muted border-t border-border py-8 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <p className=\"text-sm text-muted-foreground\">Not affiliated with WLU • Beta</p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":3634},"client/src/pages/Moderate.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\n// Mock data for reports\nconst mockReports = [\n  {\n    id: \"r1\",\n    time: \"2 hours ago\",\n    target: { name: \"Josh S.\", initials: \"JS\", session: \"BU111 - Library\" },\n    reason: \"Inappropriate content\",\n    status: \"pending\" as const,\n  },\n  {\n    id: \"r2\", \n    time: \"5 hours ago\",\n    target: { name: \"Emily L.\", initials: \"EL\", session: \"CP102 - Science\" },\n    reason: \"Fake location\",\n    status: \"resolved\" as const,\n  },\n  {\n    id: \"r3\",\n    time: \"1 day ago\", \n    target: { name: \"Mike K.\", initials: \"MK\", session: \"MA103 - Peters\" },\n    reason: \"Spam\",\n    status: \"removed\" as const,\n  },\n];\n\nconst getStatusBadge = (status: string) => {\n  switch (status) {\n    case \"pending\":\n      return <Badge variant=\"outline\" className=\"bg-yellow-100 text-yellow-800 border-yellow-300\">Pending</Badge>;\n    case \"resolved\":\n      return <Badge variant=\"outline\" className=\"bg-green-100 text-green-800 border-green-300\">Resolved</Badge>;\n    case \"removed\":\n      return <Badge variant=\"outline\" className=\"bg-red-100 text-red-800 border-red-300\">Removed</Badge>;\n    default:\n      return <Badge variant=\"outline\">Unknown</Badge>;\n  }\n};\n\nexport function Moderate() {\n  return (\n    <div className=\"min-h-screen py-8 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">Moderation Dashboard</h1>\n          <p className=\"text-muted-foreground\">Review reported sessions and manage platform safety</p>\n        </div>\n\n        <Card className=\"overflow-hidden\" data-testid=\"moderation-table\">\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow className=\"bg-muted\">\n                  <TableHead className=\"text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Time\n                  </TableHead>\n                  <TableHead className=\"text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Target\n                  </TableHead>\n                  <TableHead className=\"text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Reason\n                  </TableHead>\n                  <TableHead className=\"text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Status\n                  </TableHead>\n                  <TableHead className=\"text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Actions\n                  </TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {mockReports.map((report) => (\n                  <TableRow key={report.id} data-testid={`row-report-${report.id}`}>\n                    <TableCell className=\"text-sm text-foreground\">\n                      {report.time}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center\">\n                        <Avatar className=\"w-8 h-8 mr-3\">\n                          <AvatarFallback className=\"bg-muted text-muted-foreground text-xs\">\n                            {report.target.initials}\n                          </AvatarFallback>\n                        </Avatar>\n                        <span className=\"text-sm text-foreground\">\n                          {report.target.name} ({report.target.session})\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-sm text-foreground\">\n                      {report.reason}\n                    </TableCell>\n                    <TableCell>\n                      {getStatusBadge(report.status)}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Tooltip>\n                          <TooltipTrigger asChild>\n                            <Button\n                              disabled\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"bg-muted text-muted-foreground cursor-not-allowed\"\n                              data-testid={`button-review-${report.id}`}\n                            >\n                              {report.status === \"pending\" ? \"Review\" : \"View\"}\n                            </Button>\n                          </TooltipTrigger>\n                          <TooltipContent>\n                            <p>Admin only (demo)</p>\n                          </TooltipContent>\n                        </Tooltip>\n                        {report.status === \"pending\" && (\n                          <Tooltip>\n                            <TooltipTrigger asChild>\n                              <Button\n                                disabled\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"bg-muted text-muted-foreground cursor-not-allowed\"\n                                data-testid={`button-dismiss-${report.id}`}\n                              >\n                                Dismiss\n                              </Button>\n                            </TooltipTrigger>\n                            <TooltipContent>\n                              <p>Admin only (demo)</p>\n                            </TooltipContent>\n                          </Tooltip>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6151},"client/src/pages/Sessions.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Heart, Users } from \"lucide-react\";\nimport { FilterBar, FilterState } from \"@/components/FilterBar\";\nimport { SessionCard } from \"@/components/SessionCard\";\nimport { ReportModal } from \"@/components/ReportModal\";\nimport { DonateModal } from \"@/components/DonateModal\";\nimport { useStore } from \"@/store/useStore\";\n\nexport function Sessions() {\n  const { sessions, hasShownDonateModal, donateSnoozed, donateDismissed } = useStore();\n  const [filters, setFilters] = useState<FilterState>({\n    courseCode: \"\",\n    building: \"\",\n    floor: \"\",\n    publicOnly: true\n  });\n  const [reportModalOpen, setReportModalOpen] = useState(false);\n  const [reportSessionId, setReportSessionId] = useState<string | null>(null);\n  const [donateModalOpen, setDonateModalOpen] = useState(false);\n\n  // Check if we should show donate modal\n  useEffect(() => {\n    if (hasShownDonateModal && !donateDismissed && (!donateSnoozed || Date.now() > donateSnoozed)) {\n      setDonateModalOpen(true);\n    }\n  }, [hasShownDonateModal, donateDismissed, donateSnoozed]);\n\n  const filteredSessions = useMemo(() => {\n    return sessions.filter(session => {\n      if (filters.courseCode && session.courseCode !== filters.courseCode) return false;\n      if (filters.building && session.building !== filters.building) return false;\n      if (filters.floor && session.floor !== filters.floor) return false;\n      if (filters.publicOnly && !session.public) return false;\n      return true;\n    });\n  }, [sessions, filters]);\n\n  const handleReport = (sessionId: string) => {\n    setReportSessionId(sessionId);\n    setReportModalOpen(true);\n  };\n\n  return (\n    <div className=\"min-h-screen py-8 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground mb-2\">Study Sessions</h1>\n            <p className=\"text-muted-foreground\">Join an active study group on campus</p>\n          </div>\n          <Link href=\"/donate\">\n            <Button \n              className=\"mt-4 md:mt-0 bg-destructive text-destructive-foreground hover:opacity-90\"\n              data-testid=\"button-header-donate\"\n            >\n              <Heart className=\"w-4 h-4 mr-2\" />\n              Donate\n            </Button>\n          </Link>\n        </div>\n\n        {/* Filters */}\n        <FilterBar onFilterChange={setFilters} className=\"mb-8\" />\n\n        {/* Sessions Grid */}\n        {filteredSessions.length > 0 ? (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\" data-testid=\"sessions-grid\">\n            {filteredSessions.map((session) => (\n              <SessionCard\n                key={session.id}\n                session={session}\n                onReport={handleReport}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-16\" data-testid=\"empty-state\">\n            <div className=\"w-16 h-16 bg-muted rounded-full mx-auto mb-4 flex items-center justify-center\">\n              <Users className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n              No public sessions found\n            </h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Be the first to host a study session!\n            </p>\n            <Link href=\"/host\">\n              <Button data-testid=\"button-host-from-empty\">\n                Host a Session\n              </Button>\n            </Link>\n          </div>\n        )}\n\n        {/* Modals */}\n        <ReportModal\n          isOpen={reportModalOpen}\n          onClose={() => setReportModalOpen(false)}\n          sessionId={reportSessionId}\n        />\n\n        <DonateModal\n          isOpen={donateModalOpen}\n          onClose={() => setDonateModalOpen(false)}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":4089},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/store/useStore.ts":{"content":"import { create } from 'zustand';\nimport { Session, CreateSessionData } from '@/types';\nimport { subscribeToSessions, createSession, joinSession as firebaseJoinSession, leaveSession as firebaseLeaveSession } from '@/lib/firebaseService';\nimport { AuthUser, onAuthStateChange, signInWithGooglePopup, signInWithGoogleRedirect, signOutUser, handleRedirectResult, getCurrentUser } from '@/lib/auth';\n\ninterface StoreState {\n  sessions: Session[];\n  joinedSessions: Set<string>;\n  currentUser: { name: string; initials: string } | null;\n  authUser: AuthUser | null;\n  isAuthenticating: boolean;\n  hasShownDonateModal: boolean;\n  donateSnoozed: number | null;\n  donateDismissed: boolean;\n  unsubscribe: (() => void) | null;\n  authUnsubscribe: (() => void) | null;\n  \n  // Actions\n  setSessions: (sessions: Session[]) => void;\n  addSession: (sessionData: CreateSessionData) => Promise<string>;\n  joinSession: (sessionId: string) => Promise<void>;\n  leaveSession: (sessionId: string) => Promise<void>;\n  setCurrentUser: (user: { name: string; initials: string } | null) => void;\n  setAuthUser: (user: AuthUser | null) => void;\n  signInWithGoogle: () => Promise<void>;\n  signOut: () => Promise<void>;\n  setDonateModalShown: () => void;\n  snoozeDonateModal: () => void;\n  dismissDonateModal: () => void;\n  initializeLocalStorage: () => void;\n  initializeFirebase: () => void;\n  initializeAuth: () => void;\n  cleanup: () => void;\n}\n\n// No more dummy data - using Firebase real-time data\n\nexport const useStore = create<StoreState>((set, get) => ({\n  sessions: [],\n  joinedSessions: new Set(),\n  currentUser: null,\n  authUser: null,\n  isAuthenticating: false,\n  hasShownDonateModal: false,\n  donateSnoozed: null,\n  donateDismissed: false,\n  unsubscribe: null,\n  authUnsubscribe: null,\n\n  setSessions: (sessions) => set({ sessions }),\n\n  addSession: async (sessionData) => {\n    const { currentUser } = get();\n    const host = currentUser || { name: \"Guest User\", initials: \"GU\" };\n    \n    try {\n      const sessionId = await createSession(sessionData, host);\n      \n      // Add to joined sessions since we're the host\n      set((state) => ({\n        joinedSessions: new Set([...Array.from(state.joinedSessions), sessionId])\n      }));\n      \n      return sessionId;\n    } catch (error) {\n      console.error('Error creating session:', error);\n      throw error;\n    }\n  },\n\n  joinSession: async (sessionId) => {\n    const { joinedSessions, hasShownDonateModal, donateSnoozed, donateDismissed } = get();\n    \n    if (joinedSessions.has(sessionId)) return;\n    \n    try {\n      await firebaseJoinSession(sessionId);\n      \n      set((state) => ({\n        joinedSessions: new Set([...Array.from(state.joinedSessions), sessionId])\n      }));\n\n      // Check if we should show donate modal\n      if (!hasShownDonateModal && !donateDismissed && (!donateSnoozed || Date.now() > donateSnoozed)) {\n        setTimeout(() => {\n          set({ hasShownDonateModal: true });\n          localStorage.setItem('studybuddy_donate_shown', 'true');\n        }, 1000);\n      }\n    } catch (error) {\n      console.error('Error joining session:', error);\n      throw error;\n    }\n  },\n\n  leaveSession: async (sessionId) => {\n    const { joinedSessions } = get();\n    \n    if (!joinedSessions.has(sessionId)) return;\n    \n    try {\n      await firebaseLeaveSession(sessionId);\n      \n      const newJoinedSessions = new Set(joinedSessions);\n      newJoinedSessions.delete(sessionId);\n      \n      set({ joinedSessions: newJoinedSessions });\n    } catch (error) {\n      console.error('Error leaving session:', error);\n      throw error;\n    }\n  },\n\n  setCurrentUser: (user) => set({ currentUser: user }),\n\n  setAuthUser: (user) => {\n    set({ authUser: user });\n    // Update currentUser based on authUser\n    if (user) {\n      const displayName = user.displayName || user.email?.split('@')[0] || 'User';\n      const initials = displayName.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n      set({ currentUser: { name: displayName, initials } });\n    } else {\n      set({ currentUser: null });\n    }\n  },\n\n  signInWithGoogle: async () => {\n    set({ isAuthenticating: true });\n    try {\n      // Try popup first, fallback to redirect on mobile\n      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n      \n      if (isMobile) {\n        await signInWithGoogleRedirect();\n      } else {\n        await signInWithGooglePopup();\n      }\n    } catch (error) {\n      console.error('Sign in error:', error);\n      set({ isAuthenticating: false });\n      throw error;\n    }\n  },\n\n  signOut: async () => {\n    set({ isAuthenticating: true });\n    try {\n      await signOutUser();\n      set({ authUser: null, currentUser: null });\n    } catch (error) {\n      console.error('Sign out error:', error);\n      throw error;\n    } finally {\n      set({ isAuthenticating: false });\n    }\n  },\n\n  setDonateModalShown: () => set({ hasShownDonateModal: true }),\n\n  snoozeDonateModal: () => {\n    const snoozeUntil = Date.now() + (7 * 24 * 60 * 60 * 1000); // 7 days\n    set({ donateSnoozed: snoozeUntil });\n    localStorage.setItem('studybuddy_donate_snooze', snoozeUntil.toString());\n  },\n\n  dismissDonateModal: () => {\n    set({ donateDismissed: true });\n    localStorage.setItem('studybuddy_donate_dismissed', 'true');\n  },\n\n  initializeLocalStorage: () => {\n    const hasShown = localStorage.getItem('studybuddy_donate_shown') === 'true';\n    const snoozed = localStorage.getItem('studybuddy_donate_snooze');\n    const dismissed = localStorage.getItem('studybuddy_donate_dismissed') === 'true';\n\n    set({\n      hasShownDonateModal: hasShown,\n      donateSnoozed: snoozed ? parseInt(snoozed) : null,\n      donateDismissed: dismissed\n    });\n  },\n\n  initializeFirebase: () => {\n    const { unsubscribe } = get();\n    \n    // Clean up existing subscription if any\n    if (unsubscribe) {\n      unsubscribe();\n    }\n    \n    // Subscribe to Firebase sessions\n    const unsubscribeFn = subscribeToSessions((sessions) => {\n      set({ sessions });\n    });\n    \n    set({ unsubscribe: unsubscribeFn });\n  },\n\n  initializeAuth: () => {\n    const { authUnsubscribe } = get();\n    \n    // Clean up existing auth subscription\n    if (authUnsubscribe) {\n      authUnsubscribe();\n    }\n    \n    // Check for redirect result on app startup\n    handleRedirectResult().then((user) => {\n      if (user) {\n        set({ authUser: user });\n      }\n    }).catch(console.error);\n    \n    // Subscribe to auth state changes\n    const unsubscribeFn = onAuthStateChange((user) => {\n      set({ authUser: user, isAuthenticating: false });\n      if (user) {\n        const displayName = user.displayName || user.email?.split('@')[0] || 'User';\n        const initials = displayName.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n        set({ currentUser: { name: displayName, initials } });\n      } else {\n        set({ currentUser: null });\n      }\n    });\n    \n    set({ authUnsubscribe: unsubscribeFn });\n  },\n\n  cleanup: () => {\n    const { unsubscribe, authUnsubscribe } = get();\n    if (unsubscribe) {\n      unsubscribe();\n      set({ unsubscribe: null });\n    }\n    if (authUnsubscribe) {\n      authUnsubscribe();\n      set({ authUnsubscribe: null });\n    }\n  }\n}));\n","size_bytes":7285},"client/src/types/index.ts":{"content":"export interface Session {\n  id: string;\n  courseCode: string;\n  building: string;\n  floor: string;\n  capacity: number;\n  attendeeCount: number;\n  public: boolean;\n  endsAt: string;\n  host: {\n    name: string;\n    initials: string;\n  };\n  notes?: string;\n  area?: string;\n  duration: number;\n  locationImages?: string[]; // Array of image URLs showing the study location\n  scheduledDate?: Date; // Date when the session is scheduled to start\n  startTime?: string; // Time in HH:MM format when session starts\n  isScheduled?: boolean; // Whether this is a scheduled session (true) or immediate session (false)\n}\n\nexport interface Course {\n  code: string;\n  name: string;\n}\n\nexport interface Building {\n  name: string;\n}\n\nexport interface ReportData {\n  sessionId: string;\n  reason: string;\n  details?: string;\n}\n\nexport interface CreateSessionData {\n  courseCode: string;\n  building: string;\n  floor: string;\n  area?: string;\n  capacity: number;\n  duration: number;\n  notes?: string;\n  public: boolean;\n  locationImages?: string[]; // Array of image URLs showing the study location\n  scheduledDate?: Date; // Date when the session is scheduled to start\n  startTime?: string; // Time in HH:MM format when session starts\n  isScheduled?: boolean; // Whether this is a scheduled session (true) or immediate session (false)\n}\n","size_bytes":1319},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ImageUpload.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { X, Upload, Camera } from \"lucide-react\";\n\ninterface ImageUploadProps {\n  images: File[];\n  onChange: (images: File[]) => void;\n  maxImages?: number;\n  maxSizeMB?: number;\n  acceptedTypes?: string[];\n  className?: string;\n}\n\nexport function ImageUpload({\n  images,\n  onChange,\n  maxImages = 3,\n  maxSizeMB = 5,\n  acceptedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'],\n  className = \"\"\n}: ImageUploadProps) {\n  const [dragOver, setDragOver] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFiles = (fileList: FileList | null) => {\n    if (!fileList) return;\n    \n    const files = Array.from(fileList);\n    const validFiles: File[] = [];\n    let errorMessage = \"\";\n\n    // Check if adding these files would exceed the maximum\n    if (images.length + files.length > maxImages) {\n      errorMessage = `Maximum ${maxImages} images allowed`;\n      setError(errorMessage);\n      return;\n    }\n\n    for (const file of files) {\n      // Check file type\n      if (!acceptedTypes.includes(file.type)) {\n        errorMessage = \"Only JPEG, PNG, and WebP images are allowed\";\n        break;\n      }\n\n      // Check file size\n      if (file.size > maxSizeMB * 1024 * 1024) {\n        errorMessage = `Each image must be smaller than ${maxSizeMB}MB`;\n        break;\n      }\n\n      validFiles.push(file);\n    }\n\n    if (errorMessage) {\n      setError(errorMessage);\n      return;\n    }\n\n    setError(null);\n    onChange([...images, ...validFiles]);\n  };\n\n  const removeImage = (index: number) => {\n    const newImages = images.filter((_, i) => i !== index);\n    onChange(newImages);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragOver(false);\n    handleFiles(e.dataTransfer.files);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragOver(false);\n  };\n\n  const openFileDialog = () => {\n    fileInputRef.current?.click();\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"space-y-4\">\n        {/* Upload Area */}\n        <Card\n          className={`border-2 border-dashed transition-colors cursor-pointer ${\n            dragOver\n              ? \"border-primary bg-primary/10\"\n              : \"border-muted-foreground/25 hover:border-primary/50\"\n          }`}\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          onClick={openFileDialog}\n          data-testid=\"image-upload-area\"\n        >\n          <CardContent className=\"flex flex-col items-center justify-center py-8\">\n            <div className=\"flex items-center space-x-2 text-muted-foreground mb-2\">\n              <Camera className=\"w-6 h-6\" />\n              <Upload className=\"w-6 h-6\" />\n            </div>\n            <p className=\"text-sm text-center\">\n              <span className=\"font-medium\">Click to upload</span> or drag and drop\n            </p>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              JPEG, PNG, WebP up to {maxSizeMB}MB ({maxImages - images.length} remaining)\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Hidden file input */}\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          multiple\n          accept={acceptedTypes.join(',')}\n          onChange={(e) => handleFiles(e.target.files)}\n          className=\"hidden\"\n          data-testid=\"file-input\"\n        />\n\n        {/* Error Message */}\n        {error && (\n          <p className=\"text-sm text-destructive\" data-testid=\"error-message\">\n            {error}\n          </p>\n        )}\n\n        {/* Image Previews */}\n        {images.length > 0 && (\n          <div className=\"grid grid-cols-3 gap-4\">\n            {images.map((file, index) => (\n              <div key={`${file.name}-${index}`} className=\"relative group\">\n                <Card className=\"overflow-hidden\">\n                  <div className=\"aspect-square relative\">\n                    <img\n                      src={URL.createObjectURL(file)}\n                      alt={`Upload preview ${index + 1}`}\n                      className=\"w-full h-full object-cover\"\n                      data-testid={`preview-image-${index}`}\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"destructive\"\n                      size=\"icon\"\n                      className=\"absolute top-2 right-2 w-6 h-6 opacity-0 group-hover:opacity-100 transition-opacity\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        removeImage(index);\n                      }}\n                      data-testid={`remove-image-${index}`}\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                </Card>\n                <p className=\"text-xs text-muted-foreground mt-1 truncate\">\n                  {file.name}\n                </p>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Helper Text */}\n        <p className=\"text-xs text-muted-foreground\">\n          Upload photos of your study location to help others find you easily.\n        </p>\n      </div>\n    </div>\n  );\n}","size_bytes":5568}},"version":1}